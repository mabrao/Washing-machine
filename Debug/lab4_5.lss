
lab4_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  000003b8  0000042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001432  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dba  00000000  00000000  00001936  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b5  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00002ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000617  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bd1  00000000  00000000  00003543  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00004114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 eb       	ldi	r30, 0xB8	; 184
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	51 c1       	rjmp	.+674    	; 0x3b4 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:



int main(void)
{
    DDRL = 0xFF; //PORTL as an input
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
	PORTL = 0x00; //Pull ups on
 11a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	DDRK = 0xFF; //PORTK as an output
 11e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	PORTK = 0x00; //Start with outputs off
 122:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
		while(PINA & 0x08) //don't start if door is open
		{	
		}
		if(PINA & 0x01) //hot mode
		{
			PORTK = 0x10;
 126:	c8 e0       	ldi	r28, 0x08	; 8
 128:	d1 e0       	ldi	r29, 0x01	; 1
 12a:	68 94       	set
 12c:	cc 24       	eor	r12, r12
 12e:	c4 f8       	bld	r12, 4
			_delay_ms(4000);
		}
		if(PINA &  0x02) //warm mode
		{
			PORTK = 0x14;
 130:	0f 2e       	mov	r0, r31
 132:	f4 e1       	ldi	r31, 0x14	; 20
 134:	df 2e       	mov	r13, r31
 136:	f0 2d       	mov	r31, r0
			_delay_ms(4000);
		}
		if(PINA & 0x04) //cold mode
		{
			PORTK = 0x04;
 138:	04 e0       	ldi	r16, 0x04	; 4
			_delay_ms(4000);
		}
		PORTK = 0x00; //reset output
		//_delay_ms(4000);
		Motor_Control('A', 8); //motor in agitate for 8 seconds
		PORTL = 0x00;//motor off
 13a:	0f 2e       	mov	r0, r31
 13c:	fb e0       	ldi	r31, 0x0B	; 11
 13e:	ef 2e       	mov	r14, r31
 140:	ff 24       	eor	r15, r15
 142:	f3 94       	inc	r15
 144:	f0 2d       	mov	r31, r0
		PORTK = 0x01; //drain valve on
 146:	11 e0       	ldi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	83 e2       	ldi	r24, 0x23	; 35
 14c:	94 ef       	ldi	r25, 0xF4	; 244
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x3a>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x44>
 158:	00 00       	nop
	PORTK = 0x00; //Start with outputs off
	
    while (1) 
    {
		_delay_ms(5000);
		while((PINA & 0x10) == 0x00) //wait for start pb
 15a:	04 9b       	sbis	0x00, 4	; 0
 15c:	fe cf       	rjmp	.-4      	; 0x15a <main+0x46>
		{
		}
		while(PINA & 0x08) //don't start if door is open
 15e:	03 99       	sbic	0x00, 3	; 0
 160:	fe cf       	rjmp	.-4      	; 0x15e <main+0x4a>
		{	
		}
		if(PINA & 0x01) //hot mode
 162:	00 9b       	sbis	0x00, 0	; 0
 164:	0a c0       	rjmp	.+20     	; 0x17a <main+0x66>
		{
			PORTK = 0x10;
 166:	c8 82       	st	Y, r12
 168:	ef ef       	ldi	r30, 0xFF	; 255
 16a:	ff e4       	ldi	r31, 0x4F	; 79
 16c:	23 ec       	ldi	r18, 0xC3	; 195
 16e:	e1 50       	subi	r30, 0x01	; 1
 170:	f0 40       	sbci	r31, 0x00	; 0
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x5a>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x64>
 178:	00 00       	nop
			_delay_ms(4000);
		}
		if(PINA &  0x02) //warm mode
 17a:	01 9b       	sbis	0x00, 1	; 0
 17c:	0a c0       	rjmp	.+20     	; 0x192 <main+0x7e>
		{
			PORTK = 0x14;
 17e:	d8 82       	st	Y, r13
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9f e4       	ldi	r25, 0x4F	; 79
 184:	e3 ec       	ldi	r30, 0xC3	; 195
 186:	81 50       	subi	r24, 0x01	; 1
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e0 40       	sbci	r30, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x72>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x7c>
 190:	00 00       	nop
			_delay_ms(4000);
		}
		if(PINA & 0x04) //cold mode
 192:	02 9b       	sbis	0x00, 2	; 0
 194:	0a c0       	rjmp	.+20     	; 0x1aa <main+0x96>
		{
			PORTK = 0x04;
 196:	08 83       	st	Y, r16
 198:	ff ef       	ldi	r31, 0xFF	; 255
 19a:	2f e4       	ldi	r18, 0x4F	; 79
 19c:	83 ec       	ldi	r24, 0xC3	; 195
 19e:	f1 50       	subi	r31, 0x01	; 1
 1a0:	20 40       	sbci	r18, 0x00	; 0
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x8a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x94>
 1a8:	00 00       	nop
			_delay_ms(4000);
		}
		PORTK = 0x00; //reset output
 1aa:	18 82       	st	Y, r1
		//_delay_ms(4000);
		Motor_Control('A', 8); //motor in agitate for 8 seconds
 1ac:	68 e0       	ldi	r22, 0x08	; 8
 1ae:	81 e4       	ldi	r24, 0x41	; 65
 1b0:	f4 d0       	rcall	.+488    	; 0x39a <Motor_Control>
		PORTL = 0x00;//motor off
 1b2:	f7 01       	movw	r30, r14
 1b4:	10 82       	st	Z, r1
		PORTK = 0x01; //drain valve on
 1b6:	18 83       	st	Y, r17
 1b8:	ff ef       	ldi	r31, 0xFF	; 255
 1ba:	2f e4       	ldi	r18, 0x4F	; 79
 1bc:	83 ec       	ldi	r24, 0xC3	; 195
 1be:	f1 50       	subi	r31, 0x01	; 1
 1c0:	20 40       	sbci	r18, 0x00	; 0
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0xaa>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0xb4>
 1c8:	00 00       	nop
		_delay_ms(4000);
		PORTK = 0x00; //drain valve off
 1ca:	18 82       	st	Y, r1
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	ef e4       	ldi	r30, 0x4F	; 79
 1d0:	f3 ec       	ldi	r31, 0xC3	; 195
 1d2:	91 50       	subi	r25, 0x01	; 1
 1d4:	e0 40       	sbci	r30, 0x00	; 0
 1d6:	f0 40       	sbci	r31, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0xbe>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0xc8>
 1dc:	00 00       	nop
		_delay_ms(4000);
		if(PINA & 0x01) //hot mode
 1de:	00 9b       	sbis	0x00, 0	; 0
 1e0:	0a c0       	rjmp	.+20     	; 0x1f6 <main+0xe2>
		{
			PORTK = 0x10;
 1e2:	c8 82       	st	Y, r12
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	8f e4       	ldi	r24, 0x4F	; 79
 1e8:	93 ec       	ldi	r25, 0xC3	; 195
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0xd6>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0xe0>
 1f4:	00 00       	nop
			_delay_ms(4000);
		}
		if(PINA &  0x02) //warm mode
 1f6:	01 9b       	sbis	0x00, 1	; 0
 1f8:	0a c0       	rjmp	.+20     	; 0x20e <main+0xfa>
		{
			PORTK = 0x14;
 1fa:	d8 82       	st	Y, r13
 1fc:	ef ef       	ldi	r30, 0xFF	; 255
 1fe:	ff e4       	ldi	r31, 0x4F	; 79
 200:	23 ec       	ldi	r18, 0xC3	; 195
 202:	e1 50       	subi	r30, 0x01	; 1
 204:	f0 40       	sbci	r31, 0x00	; 0
 206:	20 40       	sbci	r18, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0xee>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0xf8>
 20c:	00 00       	nop
			_delay_ms(4000);
		}
		if(PINA & 0x04) //cold mode
 20e:	02 9b       	sbis	0x00, 2	; 0
 210:	0a c0       	rjmp	.+20     	; 0x226 <main+0x112>
		{
			PORTK = 0x04;
 212:	08 83       	st	Y, r16
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	9f e4       	ldi	r25, 0x4F	; 79
 218:	e3 ec       	ldi	r30, 0xC3	; 195
 21a:	81 50       	subi	r24, 0x01	; 1
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e0 40       	sbci	r30, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0x106>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x110>
 224:	00 00       	nop
			_delay_ms(4000);
		}
		PORTK = 0x00; //valves off
 226:	18 82       	st	Y, r1
		Motor_Control('A', 6); //motor in agitate for 6 seconds (rinse)
 228:	66 e0       	ldi	r22, 0x06	; 6
 22a:	81 e4       	ldi	r24, 0x41	; 65
 22c:	b6 d0       	rcall	.+364    	; 0x39a <Motor_Control>
 22e:	ff ef       	ldi	r31, 0xFF	; 255
 230:	2f e4       	ldi	r18, 0x4F	; 79
 232:	83 ec       	ldi	r24, 0xC3	; 195
 234:	f1 50       	subi	r31, 0x01	; 1
 236:	20 40       	sbci	r18, 0x00	; 0
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x120>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x12a>
 23e:	00 00       	nop
		_delay_ms(4000);
		PORTK = 0x01; //drain valve on
 240:	18 83       	st	Y, r17
 242:	9f ef       	ldi	r25, 0xFF	; 255
 244:	e3 ed       	ldi	r30, 0xD3	; 211
 246:	f0 e3       	ldi	r31, 0x30	; 48
 248:	91 50       	subi	r25, 0x01	; 1
 24a:	e0 40       	sbci	r30, 0x00	; 0
 24c:	f0 40       	sbci	r31, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0x134>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x13e>
 252:	00 00       	nop
		_delay_ms(1000);
		Motor_Control('S',8);
 254:	68 e0       	ldi	r22, 0x08	; 8
 256:	83 e5       	ldi	r24, 0x53	; 83
 258:	a0 d0       	rcall	.+320    	; 0x39a <Motor_Control>
		PORTK = 0x00; //drain valve off
 25a:	18 82       	st	Y, r1
		PORTK = 0x04; //done
 25c:	08 83       	st	Y, r16
		while(!(PINA & 0x08)) //don't start if door is open
 25e:	03 9b       	sbis	0x00, 3	; 0
 260:	fe cf       	rjmp	.-4      	; 0x25e <main+0x14a>
 262:	72 cf       	rjmp	.-284    	; 0x148 <main+0x34>

00000264 <Stepper_Drive_Time>:
	PORTL = 0x00; //clear output when done
}


void Stepper_Drive_Time(char mode,uint8_t t)
{
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	28 97       	sbiw	r28, 0x08	; 8
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	de bf       	out	0x3e, r29	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	cd bf       	out	0x3d, r28	; 61
	uint8_t Half2[8] = {0x08, 0x0C, 0x04, 0x06, 0x02, 0x03, 0x01, 0x09};
 27c:	98 e0       	ldi	r25, 0x08	; 8
 27e:	e0 e1       	ldi	r30, 0x10	; 16
 280:	f2 e0       	ldi	r31, 0x02	; 2
 282:	de 01       	movw	r26, r28
 284:	11 96       	adiw	r26, 0x01	; 1
 286:	01 90       	ld	r0, Z+
 288:	0d 92       	st	X+, r0
 28a:	9a 95       	dec	r25
 28c:	e1 f7       	brne	.-8      	; 0x286 <Stepper_Drive_Time+0x22>
	uint8_t steps = 25; //what should be the data type of steps?
	//you need to calculate the steps needed for each revolution
	switch (mode)
 28e:	88 34       	cpi	r24, 0x48	; 72
 290:	31 f0       	breq	.+12     	; 0x29e <Stepper_Drive_Time+0x3a>
 292:	87 35       	cpi	r24, 0x57	; 87
 294:	01 f1       	breq	.+64     	; 0x2d6 <Stepper_Drive_Time+0x72>
 296:	86 34       	cpi	r24, 0x46	; 70
 298:	09 f0       	breq	.+2      	; 0x29c <Stepper_Drive_Time+0x38>
 29a:	74 c0       	rjmp	.+232    	; 0x384 <Stepper_Drive_Time+0x120>
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <Stepper_Drive_Time+0x44>
		}
		break;
		case 'H':
		//steps = revolutions * 4096UL / 8;
		//you need to calculate the steps needed for each revolution
		for (uint8_t k= 0; k< (t/2);k++)
 29e:	06 2f       	mov	r16, r22
 2a0:	06 95       	lsr	r16
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <Stepper_Drive_Time+0x42>
 2a4:	64 c0       	rjmp	.+200    	; 0x36e <Stepper_Drive_Time+0x10a>
 2a6:	6e c0       	rjmp	.+220    	; 0x384 <Stepper_Drive_Time+0x120>
		}
		break;
		case 'F':
		//steps = revolutions * 2048UL / 4;
		//you need to calculate the steps needed for each revolution
		for(uint16_t i = 0; i< 50*t; i++)
 2a8:	82 e3       	ldi	r24, 0x32	; 50
 2aa:	68 9f       	mul	r22, r24
 2ac:	a0 01       	movw	r20, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	41 15       	cp	r20, r1
 2b2:	51 05       	cpc	r21, r1
 2b4:	51 f5       	brne	.+84     	; 0x30a <Stepper_Drive_Time+0xa6>
 2b6:	66 c0       	rjmp	.+204    	; 0x384 <Stepper_Drive_Time+0x120>
		//you need to calculate the steps needed for each revolution
		for(uint16_t i = 0; i< steps; i++) //loop thru array # of times
		{
			for(uint16_t j = 0; j< 4; j++) //loop thru the whole array
			{
				PORTL = Wave[j];
 2b8:	81 91       	ld	r24, Z+
 2ba:	8c 93       	st	X, r24
 2bc:	8f e1       	ldi	r24, 0x1F	; 31
 2be:	9e e4       	ldi	r25, 0x4E	; 78
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <Stepper_Drive_Time+0x5c>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <Stepper_Drive_Time+0x62>
 2c6:	00 00       	nop
		//steps = revolutions * 2048UL / 4; //each rev takes 32*64 steps, array has
		//4 elements
		//you need to calculate the steps needed for each revolution
		for(uint16_t i = 0; i< steps; i++) //loop thru array # of times
		{
			for(uint16_t j = 0; j< 4; j++) //loop thru the whole array
 2c8:	2e 17       	cp	r18, r30
 2ca:	3f 07       	cpc	r19, r31
 2cc:	a9 f7       	brne	.-22     	; 0x2b8 <Stepper_Drive_Time+0x54>
 2ce:	41 50       	subi	r20, 0x01	; 1
 2d0:	51 09       	sbc	r21, r1
	{
		case 'W':
		//steps = revolutions * 2048UL / 4; //each rev takes 32*64 steps, array has
		//4 elements
		//you need to calculate the steps needed for each revolution
		for(uint16_t i = 0; i< steps; i++) //loop thru array # of times
 2d2:	39 f4       	brne	.+14     	; 0x2e2 <Stepper_Drive_Time+0x7e>
 2d4:	57 c0       	rjmp	.+174    	; 0x384 <Stepper_Drive_Time+0x120>
void Stepper_Drive_Time(char mode,uint8_t t)
{
	uint8_t Half2[8] = {0x08, 0x0C, 0x04, 0x06, 0x02, 0x03, 0x01, 0x09};
	uint8_t steps = 25; //what should be the data type of steps?
	//you need to calculate the steps needed for each revolution
	switch (mode)
 2d6:	49 e1       	ldi	r20, 0x19	; 25
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	20 e1       	ldi	r18, 0x10	; 16
 2dc:	32 e0       	ldi	r19, 0x02	; 2
		//you need to calculate the steps needed for each revolution
		for(uint16_t i = 0; i< steps; i++) //loop thru array # of times
		{
			for(uint16_t j = 0; j< 4; j++) //loop thru the whole array
			{
				PORTL = Wave[j];
 2de:	ab e0       	ldi	r26, 0x0B	; 11
 2e0:	b1 e0       	ldi	r27, 0x01	; 1
 2e2:	ec e0       	ldi	r30, 0x0C	; 12
 2e4:	f2 e0       	ldi	r31, 0x02	; 2
 2e6:	e8 cf       	rjmp	.-48     	; 0x2b8 <Stepper_Drive_Time+0x54>
		//you need to calculate the steps needed for each revolution
		for(uint16_t i = 0; i< 50*t; i++)
		{
			for(uint16_t j = 0; j< 4; j++)
			{
				PORTL = Full[j];
 2e8:	81 91       	ld	r24, Z+
 2ea:	8c 93       	st	X, r24
 2ec:	8f ed       	ldi	r24, 0xDF	; 223
 2ee:	9e e2       	ldi	r25, 0x2E	; 46
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <Stepper_Drive_Time+0x8c>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <Stepper_Drive_Time+0x92>
 2f6:	00 00       	nop
		case 'F':
		//steps = revolutions * 2048UL / 4;
		//you need to calculate the steps needed for each revolution
		for(uint16_t i = 0; i< 50*t; i++)
		{
			for(uint16_t j = 0; j< 4; j++)
 2f8:	e2 17       	cp	r30, r18
 2fa:	f3 07       	cpc	r31, r19
 2fc:	a9 f7       	brne	.-22     	; 0x2e8 <Stepper_Drive_Time+0x84>
		}
		break;
		case 'F':
		//steps = revolutions * 2048UL / 4;
		//you need to calculate the steps needed for each revolution
		for(uint16_t i = 0; i< 50*t; i++)
 2fe:	6f 5f       	subi	r22, 0xFF	; 255
 300:	7f 4f       	sbci	r23, 0xFF	; 255
 302:	64 17       	cp	r22, r20
 304:	75 07       	cpc	r23, r21
 306:	39 f4       	brne	.+14     	; 0x316 <Stepper_Drive_Time+0xb2>
 308:	3d c0       	rjmp	.+122    	; 0x384 <Stepper_Drive_Time+0x120>
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	2c e0       	ldi	r18, 0x0C	; 12
 310:	32 e0       	ldi	r19, 0x02	; 2
		{
			for(uint16_t j = 0; j< 4; j++)
			{
				PORTL = Full[j];
 312:	ab e0       	ldi	r26, 0x0B	; 11
 314:	b1 e0       	ldi	r27, 0x01	; 1
 316:	e8 e0       	ldi	r30, 0x08	; 8
 318:	f2 e0       	ldi	r31, 0x02	; 2
 31a:	e6 cf       	rjmp	.-52     	; 0x2e8 <Stepper_Drive_Time+0x84>
		{
			for(uint16_t i = 0; i< 25; i++) // 25=1s/8step/5ms
			{
				for(uint16_t j = 0; j< 8; j++)
				{
					PORTL = Half[j];
 31c:	81 91       	ld	r24, Z+
 31e:	8c 93       	st	X, r24
 320:	8f e1       	ldi	r24, 0x1F	; 31
 322:	9e e4       	ldi	r25, 0x4E	; 78
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <Stepper_Drive_Time+0xc0>
 328:	00 c0       	rjmp	.+0      	; 0x32a <Stepper_Drive_Time+0xc6>
 32a:	00 00       	nop
		//you need to calculate the steps needed for each revolution
		for (uint8_t k= 0; k< (t/2);k++)
		{
			for(uint16_t i = 0; i< 25; i++) // 25=1s/8step/5ms
			{
				for(uint16_t j = 0; j< 8; j++)
 32c:	4e 17       	cp	r20, r30
 32e:	5f 07       	cpc	r21, r31
 330:	a9 f7       	brne	.-22     	; 0x31c <Stepper_Drive_Time+0xb8>
 332:	61 50       	subi	r22, 0x01	; 1
 334:	71 09       	sbc	r23, r1
		case 'H':
		//steps = revolutions * 4096UL / 8;
		//you need to calculate the steps needed for each revolution
		for (uint8_t k= 0; k< (t/2);k++)
		{
			for(uint16_t i = 0; i< 25; i++) // 25=1s/8step/5ms
 336:	91 f0       	breq	.+36     	; 0x35c <Stepper_Drive_Time+0xf8>
 338:	e0 e0       	ldi	r30, 0x00	; 0
 33a:	f2 e0       	ldi	r31, 0x02	; 2
 33c:	ef cf       	rjmp	.-34     	; 0x31c <Stepper_Drive_Time+0xb8>
			}
			for(uint16_t i = 0; i< 25; i++)
			{
				for(uint16_t j = 0; j< 8; j++)
				{
					PORTL = Half2[j];
 33e:	81 91       	ld	r24, Z+
 340:	8c 93       	st	X, r24
 342:	8f e1       	ldi	r24, 0x1F	; 31
 344:	9e e4       	ldi	r25, 0x4E	; 78
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <Stepper_Drive_Time+0xe2>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <Stepper_Drive_Time+0xe8>
 34c:	00 00       	nop
					_delay_ms(5);
				}
			}
			for(uint16_t i = 0; i< 25; i++)
			{
				for(uint16_t j = 0; j< 8; j++)
 34e:	e2 17       	cp	r30, r18
 350:	f3 07       	cpc	r31, r19
 352:	a9 f7       	brne	.-22     	; 0x33e <Stepper_Drive_Time+0xda>
 354:	61 50       	subi	r22, 0x01	; 1
 356:	71 09       	sbc	r23, r1
				{
					PORTL = Half[j];
					_delay_ms(5);
				}
			}
			for(uint16_t i = 0; i< 25; i++)
 358:	19 f4       	brne	.+6      	; 0x360 <Stepper_Drive_Time+0xfc>
 35a:	05 c0       	rjmp	.+10     	; 0x366 <Stepper_Drive_Time+0x102>
 35c:	69 e1       	ldi	r22, 0x19	; 25
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	fe 01       	movw	r30, r28
 362:	31 96       	adiw	r30, 0x01	; 1
 364:	ec cf       	rjmp	.-40     	; 0x33e <Stepper_Drive_Time+0xda>
		}
		break;
		case 'H':
		//steps = revolutions * 4096UL / 8;
		//you need to calculate the steps needed for each revolution
		for (uint8_t k= 0; k< (t/2);k++)
 366:	1f 5f       	subi	r17, 0xFF	; 255
 368:	10 13       	cpse	r17, r16
 36a:	09 c0       	rjmp	.+18     	; 0x37e <Stepper_Drive_Time+0x11a>
 36c:	0b c0       	rjmp	.+22     	; 0x384 <Stepper_Drive_Time+0x120>
 36e:	10 e0       	ldi	r17, 0x00	; 0
 370:	48 e0       	ldi	r20, 0x08	; 8
 372:	52 e0       	ldi	r21, 0x02	; 2
		{
			for(uint16_t i = 0; i< 25; i++) // 25=1s/8step/5ms
			{
				for(uint16_t j = 0; j< 8; j++)
				{
					PORTL = Half[j];
 374:	ab e0       	ldi	r26, 0x0B	; 11
 376:	b1 e0       	ldi	r27, 0x01	; 1
 378:	9e 01       	movw	r18, r28
 37a:	27 5f       	subi	r18, 0xF7	; 247
 37c:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		break;
		case 'F':
		//steps = revolutions * 2048UL / 4;
		//you need to calculate the steps needed for each revolution
		for(uint16_t i = 0; i< 50*t; i++)
 37e:	69 e1       	ldi	r22, 0x19	; 25
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	da cf       	rjmp	.-76     	; 0x338 <Stepper_Drive_Time+0xd4>
				}
			}
		}
		break;
	}
 384:	28 96       	adiw	r28, 0x08	; 8
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <Motor_Control>:
}

void Motor_Control (char mode, uint8_t mTime)
{
	//uint8_t Half2[8] = {0x08, 0x0C, 0x04, 0x06, 0x02, 0x03, 0x01, 0x09};
	switch (mode)
 39a:	81 34       	cpi	r24, 0x41	; 65
 39c:	19 f0       	breq	.+6      	; 0x3a4 <Motor_Control+0xa>
 39e:	83 35       	cpi	r24, 0x53	; 83
 3a0:	21 f0       	breq	.+8      	; 0x3aa <Motor_Control+0x10>
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <Motor_Control+0x14>
	{
		case 'A': //if SW0 is pressed, start Wave Step mode
		{
			Stepper_Drive_Time('H',mTime);
 3a4:	88 e4       	ldi	r24, 0x48	; 72
 3a6:	5e df       	rcall	.-324    	; 0x264 <Stepper_Drive_Time>
			break;
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <Motor_Control+0x14>
		}
		case 'S': //if SW1 is pressed, Full Step mode
		{
			Stepper_Drive_Time('F',mTime);
 3aa:	86 e4       	ldi	r24, 0x46	; 70
 3ac:	5b df       	rcall	.-330    	; 0x264 <Stepper_Drive_Time>
		{
			PORTL = 0x00;
			break;
		}
	}
	PORTL = 0x00; //clear output when done
 3ae:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 3b2:	08 95       	ret

000003b4 <_exit>:
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
